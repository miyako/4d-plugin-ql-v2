/* --------------------------------------------------------------------------------
 #
 #	4DPlugin-QL.h
 #	source generated by 4D Plugin Wizard
 #	Project : QL
 #	author : miyako
 #	2021/01/11
 #  
 # --------------------------------------------------------------------------------*/

#ifndef PLUGIN_QL_H
#define PLUGIN_QL_H

#include "4DPluginAPI.h"

#import <QuickLook/QuickLook.h>
#import <Quartz/Quartz.h>

/*
because we are using private APIs, it is imperative that...
1. we compile as obj-c (not obj-c++)
2. we don't use .pch or carbon framework
*/

#pragma mark big sur

@protocol QLDataGenerationHandler
- (void)startAttachment:(NSURL *)arg1 withMimeType:(NSString *)arg2 encoding:(NSString *)arg3;
- (void)receivedDataFromServer:(NSData *)arg1 attachmentURL:(NSURL *)arg2 hasMoreData:(BOOL)arg3;
@end

@protocol QLDaemonProxyProtocol
- (void)requestDataForPreview:(NSUUID *)arg1 dataHandler:(id <QLDataGenerationHandler>)arg2;
@end

@interface QLDaemonProxy : NSObject
{
    NSXPCConnection *_connection;
    NSObject<QLDaemonProxyProtocol> *_proxy;
}

struct __QLRequest {
    struct __CFRuntimeBase {
        unsigned long long _field1;
        _Atomic unsigned long long _field2;
    } _field1;
    id _field2;
    unsigned int _field3;
    struct {
        unsigned int _field1[8];
    } _field4;
    struct __CFURL *_field5;
    struct __CFURL *_field6;
    struct __CFURL *_field7;
    void *_field8;
    struct __CFString *_field9;
    struct __CFDictionary *_field10;
    struct __CFString *_field11;
    struct __CFString *_field12;
    unsigned char _field13;
    struct __QLGenerator *_field14;
    struct __CFDictionary *_field15;
    struct CGContext *_field16;
    void (*_field17)(void);
    void *_field18;
    struct {
        long long _field1;
        void (*_field2)(void);
        void (*_field3)(void);
        void (*_field4)(void);
        void (*_field5)(void);
    } _field19;
    unsigned long long _field20;
    unsigned char _field21;
    unsigned char _field22;
    unsigned char _field23;
    unsigned char _field24;
    unsigned char _field25;
    unsigned char _field26;
    unsigned char _field27;
    unsigned char _field28;
};

+ (id)interface;
+ (id)sharedInstance;
//- (void).cxx_destruct;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (void)dealloc;
- (id)init;

@end

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

@interface QLPreviewProgressiveCallbacks : NSObject
{
    CDUnknownBlockType _startDataRepresentation;
    CDUnknownBlockType _startAttachment;
    CDUnknownBlockType _appendData;
    CDUnknownBlockType _createSafeAttachmentURL;
}

@property(copy, nonatomic) CDUnknownBlockType createSafeAttachmentURL; // @synthesize createSafeAttachmentURL=_createSafeAttachmentURL;
@property(copy, nonatomic) CDUnknownBlockType appendData; // @synthesize appendData=_appendData;
@property(copy, nonatomic) CDUnknownBlockType startAttachment; // @synthesize startAttachment=_startAttachment;
@property(copy, nonatomic) CDUnknownBlockType startDataRepresentation; // @synthesize startDataRepresentation=_startDataRepresentation;
//- (void).cxx_destruct;

@end

typedef struct __QLPreview *QLPreviewRef;

@interface QLPreview : NSObject <NSSecureCoding, QLDataGenerationHandler>
{
    struct __QLPreview *_previewRef;
    QLDaemonProxy *_daemonProxy;
    NSUUID *_uuid;
    NSMutableArray *_waitForDataCompletionBlocks;
    NSDictionary *_waitForDataOptions;
    BOOL _progressive;
    QLPreviewProgressiveCallbacks *_progressiveCallbacks;
}

- (id)synchronousGetData;
- (id)initWithURL:(NSURL *)url options:(NSDictionary *)options;
- (id)getProperties;
- (id)initWithQLPreviewRef:(struct __QLPreview *)arg1;

@property QLPreviewRef previewRef;

@end

#pragma mark catalina

QL_PRIVATE_EXPORT QLPreviewRef QLPreviewCreate(CFAllocatorRef, CFURLRef, CFDictionaryRef);
QL_PRIVATE_EXPORT void QLPreviewClose(QLPreviewRef);
QL_PRIVATE_EXPORT CFDictionaryRef QLPreviewCopyProperties(QLPreviewRef);
QL_PRIVATE_EXPORT CFStringRef QLPreviewCopyPreviewContentType(QLPreviewRef);
QL_PRIVATE_EXPORT CFStringRef QLPreviewGetDisplayBundleID(QLPreviewRef);

#pragma mark before catalina

QL_PRIVATE_EXPORT CFDataRef QLPreviewCopyData(QLPreviewRef);

#pragma mark -

void QL_Create_thumbnail(PA_PluginParameters params);
void QL_Create_preview(PA_PluginParameters params);

#endif /* PLUGIN_QL_H */
